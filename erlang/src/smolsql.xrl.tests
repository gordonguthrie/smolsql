%% -*- erlang -*-
-include_lib("eunit/include/eunit.hrl").
-compile(export_all).

%% Tests
keywords_1_test_() ->
    Str = "select",
    Got = smolsql_lexer:get_tokens(Str),
    Expected = [{select, Str}],
    ?_assertEqual(Expected, Got).

keywords_2_test_() ->
    Str = "seLEct",
    Got = smolsql_lexer:get_tokens(Str),
    Expected = [{select, Str}],
    ?_assertEqual(Expected, Got).

keywords_3_test_() ->
    Got = smolsql_lexer:get_tokens("from Where anD oR oN delETe InneR JOIn"),
    Expected = [
                {from,       "from"},
                {where,      "Where"},
                {and_,       "anD"},
                {or_,        "oR"},
                {on,         "oN"},
                {delete,     "delETe"},
                {inner_join, "InneR JOIn"}
               ],
    ?_assertEqual(Expected, Got).

keywords_3a_test_() ->
    Got = smolsql_lexer:get_tokens("from where and or delete inner join"),
    Expected = [
                {from,       "from"},
                {where,      "where"},
                {and_,       "and"},
                {or_,        "or"},
                {delete,     "delete"},
                {inner_join, "inner join"}
               ],
    ?_assertEqual(Expected, Got).

keywords_3b_test_() ->
    Got = smolsql_lexer:get_tokens("FROM WHERE AND OR INNER JOIN"),
    Expected = [
                {from,       "FROM"},
                {where,      "WHERE"},
                {and_,       "AND"},
                {or_,        "OR"},
                {inner_join, "INNER JOIN"}
               ],
    ?_assertEqual(Expected, Got).

words_containing_keywords_test_() ->
    Got = smolsql_lexer:get_tokens("error or horror and handy andy"),
    Expected = [
                {chars, "error"},
                {or_,   "or"},
                {chars, "horror"},
                {and_,  "and"},
                {chars, "handy"},
                {chars, "andy"}
               ],
    ?_assertEqual(Expected, Got).

words_containing_digits_test_() ->
    Got = smolsql_lexer:get_tokens("'sha512' sha 512"),
    Expected = [
                {chars, "sha512"},
                {chars, "sha"},
                {int, 512}
               ],
    ?_assertEqual(Expected, Got).

nums_test_() ->
    Got = smolsql_lexer:get_tokens("1 -2 2.0 -2.0 3.3e+3 -3.3e-3"),
    Expected = [
                {int, 1},
                {int, -2},
                {float, 2.0},
                {float, -2.0},
                {float, 3300.0},
                {float, -0.0033}
               ],
    ?_assertEqual(Expected, Got).

ops_test_() ->
    Got = smolsql_lexer:get_tokens("> < <> != !~ = =~"),
    Expected = [
                {gt,        ">"},
                {lt,        "<"},
                {ne,        "<>"},
                {nomatch,   "!="},
                {notapprox, "!~"},
                {eq,        "="},
                {approx,    "=~"}
               ],
    ?_assertEqual(Expected, Got).

brackets_test_() ->
    Got = smolsql_lexer:get_tokens(" ( )"),
    Expected = [
                {openb,  "("},
                {closeb, ")"}
               ],
    ?_assertEqual(Expected, Got).

datetime_1a_test_() ->
    Got = smolsql_lexer:get_tokens("'23 April 1963 8:00 AM'"),
    Expected = [
                {datetime, {{1963, 4, 23}, {8, 0, 0}}}
               ],
    ?_assertEqual(Expected, Got).

datetime_1b_test_() ->
    Got = smolsql_lexer:get_tokens("'  23   April 1963 8:00 AM  '"),
    Expected = [
                {datetime, {{1963, 4, 23}, {8, 0, 0}}}
               ],
    ?_assertEqual(Expected, Got).

%% this test can never pass becuz the date parser substitutes the H:M:s from now() if there is not time in the string
%% datetime_1c_test_() ->
%%     Got = smolsql_lexer:get_tokens("'2013-08-13'"),
%%     Expected = [
%%              {datetime, {{2013, 8, 13}, {0, 0, 0}}}
%%             ],
%%     ?_assertEqual(Expected, Got).

datetime_1d_test_() ->
    Got = smolsql_lexer:get_tokens("'2013-08-12 23:32:01'"),
    Expected = [
                {datetime, {{2013, 8, 12}, {23, 32, 1}}}
               ],
    ?_assertEqual(Expected, Got).

not_a_date_test_() ->
    Got = smolsql_lexer:get_tokens("'ergle'"),
    Expected = [
                {chars, "ergle"}
               ],
    ?_assertEqual(Expected, Got).

double_quote_1_test_() ->
    Got = smolsql_lexer:get_tokens("\" yardle hoop !@#$%^&*() _ -\""),
    Expected = [
                {quoted, "yardle hoop !@#$%^&*() _ -"}
               ],
    ?_assertEqual(Expected, Got).

regex_1_test_() ->
    Got = smolsql_lexer:get_tokens("/*./"),
    Expected = [
                {regex, "/*./"}
               ],
    ?_assertEqual(Expected, Got).

regex_2_test_() ->
    Got = smolsql_lexer:get_tokens("/^*./i"),
    Expected = [
                {regex, "/^*./i"}
               ],
    io:format("Expected is ~p~n", [Expected]),
    io:format("Got is ~p~n", [Got]),
    ?_assertEqual(Expected, Got).

regex_3_test_() ->
    Got = smolsql_lexer:get_tokens("/*./ or /erkle/"),
    Expected = [
                {regex, "/*./"},
                {or_,   "or"},
                {regex, "/erkle/"}
               ],
    ?_assertEqual(Expected, Got).

chars_test_() ->
    Got = smolsql_lexer:get_tokens("r_t , ee where"),
    Expected = [
                {chars, "r_t"},
                {comma, ","},
                {chars, "ee"},
                {where, "where"}
               ],
    io:format("Expected is ~p~n", [Expected]),
    io:format("Got is ~p~n", [Got]),
    ?_assertEqual(Expected, Got).

arithmatic_test_() ->
    Got = smolsql_lexer:get_tokens(" + - * / "),
    Expected = [
                {plus,       "+"},
                {minus,      "-"},
                {maybetimes, "*"},
                {div_,       "/"}
               ],
    ?_assertEqual(Expected, Got).

general_test_() ->
    Got = smolsql_lexer:get_tokens("select v from r_t where time > '23 April 63 1:2:3'"),
    Expected = [
                {select, "select"},
                {chars,  "v"},
                {from, "from"},
                {chars, "r_t"},
                {where, "where"},
                {chars, "time"},
                {gt, ">"},
                {datetime, {{1963, 4, 23}, {1, 2, 3}}}
               ],
    io:format("Expected is ~p~n", [Expected]),
    io:format("Got is ~p~n", [Got]),
    ?_assertEqual(Expected, Got).