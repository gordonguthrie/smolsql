%% -*- erlang -*-
-include_lib("eunit/include/eunit.hrl").

-define(sql_compilation_assert(String, Expected),
	Toks = riak_ql_lexer:get_tokens(String),
	{ok, Got} = parse(Toks),
	?assertEqual(Expected, Got)).

-define(sql_compilation_fail(QL_string),
	Toks = riak_ql_lexer:get_tokens(QL_string),
	Got = parse(Toks),
	?assertMatch({error, _}, Got)).

%% Tests
select_sql_test() ->
    ?sql_compilation_assert("select * from argle",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"argle">>}).

select_quoted_sql_test() ->
    ?sql_compilation_assert("select * from \"argle\"",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"argle">>}).

select_quoted_keyword_sql_test() ->
    ?sql_compilation_assert("select * from \"select\"",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"select">>}).

select_nested_quotes_sql_test() ->
    ?sql_compilation_assert("select * from \"some \"quotes\" in me\"",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"some \"quotes\" in me">>}).

select_regex_sql_test() ->
    ?sql_compilation_assert("select * from /.*/",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = {regex, "/.*/"}}).

select_from_lists_sql_test() ->
    ?sql_compilation_assert("select * from events, errors",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = {list, [<<"events">>, <<"errors">>]}
					}).

select_fields_from_lists_sql_test() ->
    ?sql_compilation_assert("select hip, hop, dont, stop from events",
			    #riak_sql_v1{'SELECT' = [["hip"], ["hop"], ["dont"], ["stop"]],
					 'FROM'   = <<"events">>
					}).

select_where_1_sql_test() ->
    ?sql_compilation_assert("select value from response_times " ++
				"where time > '2013-08-12 23:32:01' and time < '2013-08-13 12:34:56'",
			    #riak_sql_v1{'SELECT' = [["value"]],
					 'FROM'   = <<"response_times">>,
					 'WHERE'  = [
						     {and_,
						      {'>', "time", {datetime, {{2013, 8, 12}, {23, 32, 1}}}},
						      {'<', "time", {datetime, {{2013, 8, 13}, {12, 34, 56}}}}
						     }
						    ]
					}).

select_where_2_sql_test() ->
    ?sql_compilation_assert("select value from response_times where time > 1388534400",
			    #riak_sql_v1{'SELECT' = [["value"]],
					 'FROM'   = <<"response_times">>,
					 'WHERE'  = [
						     {'>', "time", {int, 1388534400}}
						    ]
					}).

select_where_3_sql_test() ->
    ?sql_compilation_assert("select value from response_times where time > 1388534400s",
			    #riak_sql_v1{'SELECT' = [["value"]],
					 'FROM'   = <<"response_times">>,
					 'WHERE'  = [
						     {'>', "time", {int, 1388534400}}
						    ]
					}).

select_where_4_sql_test() ->
    ?sql_compilation_assert("select * from events where time = 1400497861762723 "++
				"and sequence_number = 2321",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {and_, 
						      {'=', "time",            {int, 1400497861762723}},
						      {'=', "sequence_number", {int, 2321}}
						     }
						    ]
					}).

select_where_5_sql_test() ->
    ?sql_compilation_assert("select * from events where state = 'NY'",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {'=', "state", {word, "NY"}}
						    ]
					}).

select_where_6_sql_test() ->
    ?sql_compilation_assert("select * from log_lines where line =~ /error/i",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"log_lines">>,
					 'WHERE'  = [
						     {'=~', "line", {regex, "/error/i"}}
						    ]
					}).

select_where_7_sql_test() ->
    ?sql_compilation_assert("select * from events where customer_id = 23 and type = 'click10'",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {and_, 
						      {'=', "customer_id", {int,  23}},
						      {'=', "type",        {word, "click10"}}
						     }
						    ]
					}).

select_where_8_sql_test() ->
    ?sql_compilation_assert("select * from response_times where value > 500",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"response_times">>,
					 'WHERE'  = [
						     {'>', "value", {int, 500}}
						    ]
					}).

select_where_9_sql_test() ->
    ?sql_compilation_assert("select * from events where email !~ /.*gmail.*/",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {'!~', "email", {regex, "/.*gmail.*/"}}
						    ]
					}).

select_where_10_sql_test() ->
    ?sql_compilation_assert("select * from nagios_checks where status <> 0",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"nagios_checks">>,
					 'WHERE'  = [
						     {'<>', "status", {int, 0}}
						    ]
					}).

select_where_11_sql_test() ->
    ?sql_compilation_assert("select * from events where signed_in = false",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {'=', "signed_in", {word, "false"}}
						    ]
					}).

select_where_12_sql_test() ->
    ?sql_compilation_assert("select * from events where (email =~ /.*gmail.*/ or " ++
				"email =~ /.*yahoo.*/) and state = 'ny'",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {and_,
						      {or_,
						       {'=~', "email", {regex, "/.*gmail.*/"}},
						       {'=~', "email", {regex, "/.*yahoo.*/"}}},
						      {'=', "state", {word, "ny"}}}
						    ]
					}).

select_where_letters_nos_in_strings_1a_test() ->
    ?sql_compilation_assert("select * from events where user = 'user 1'",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {'=', "user", {word, "user 1"}}
						    ]
					}).

select_where_letters_nos_in_strings_1b_test() ->
    ?sql_compilation_assert("select * from events where user = \"user 1\"",
			    #riak_sql_v1{'SELECT' = [["*"]],
					 'FROM'   = <<"events">>,
					 'WHERE'  = [
						     {'=', "user", {word, "user 1"}}
						    ]
					}).

select_where_letters_nos_in_strings_2b_test() ->
    ?sql_compilation_assert("select weather from GeoCheckin where time > 2000 and time < 8000 and user = \"user_1\"",
			    #riak_sql_v1{'SELECT' = [["weather"]],
					 'FROM'   = <<"GeoCheckin">>,
					 'WHERE'  = [
						     {and_,
						      {and_,
						       {'>', "time", {int, 2000}},
						       {'<', "time", {int, 8000}}},
						      {'=', "user", {word, "user_1"}}}
						    ]
					}).

select_where_brackets_1_test() ->
    ?sql_compilation_assert("select weather from GeoCheckin where (time > 2000 and time < 8000) and user = \"user_1\"",
			    #riak_sql_v1{'SELECT' = [["weather"]],
					 'FROM'   = <<"GeoCheckin">>,
					 'WHERE'  = [
						     {and_,
						      {and_,
						       {'>', "time", {int, 2000}},
						       {'<', "time", {int, 8000}}},
						      {'=', "user", {word, "user_1"}}}
						    ]
					}).

select_where_brackets_2_test() ->
    ?sql_compilation_assert("select weather from GeoCheckin where user = \"user_1\" and (time > 2000 and time < 8000)",
			    #riak_sql_v1{'SELECT' = [["weather"]],
					 'FROM'   = <<"GeoCheckin">>,
					 'WHERE'  = [
						     {and_,
						      {'=', "user", {word, "user_1"}},
						      {and_,
						       {'>', "time", {int, 2000}},
						       {'<', "time", {int, 8000}}
						      }
						     }
						    ]
					}).

select_where_brackets_2a_test() ->
    ?sql_compilation_assert("select weather from GeoCheckin where user = \"user_1\" and (time > 2000 and (time < 8000))",
			    #riak_sql_v1{'SELECT' = [["weather"]],
					 'FROM'   = <<"GeoCheckin">>,
					 'WHERE'  = [
						     {and_,
						      {'=', "user", {word, "user_1"}},
						      {and_,
						       {'>', "time", {int, 2000}},
						       {'<', "time", {int, 8000}}
						      }
						     }
						    ]
					}).


%%%
%%% Insert Into Query
%%%

simple_insert_sql_test() ->
    ?sql_compilation_assert("INSERT INTO Custs (CustomerName, ContactName) "
			    ++ "VALUES ('Cardinal','Tom B. Erichsen')",
			    #riak_sql_insert_v1{'INSERT INTO' = <<"Custs">>,
						'VALUES'      = [
								{"CustomerName", "Cardinal"},
								 {"ContactName", "Tom B. Erichsen"}
								]}).

simple_join_sql_test() ->
    ?sql_compilation_assert("select * FROM bish INNER JOIN bash ON bish.erk = bash.erk",
			    #riak_sql_v1{'SELECT'     = [["*"]],
					 'FROM'       = <<"bish">>,
					 'INNER JOIN' = <<"bash">>,
					 'ON'         = {"bish.erk", "bash.erk"}}).

%%%
%%% Failure tests
%%%

failure_sql_test() ->
    String = "klsdafj kljfd (*((*& 89& 8KHH kJHkj hKJH K K",
    Expected = error,
    Got = case parse(riak_ql_lexer:get_tokens(String)) of
	      {error, _Err} -> error;
	      Other         -> {should_not_compile, Other}
	  end,
    ?assertEqual(Expected, Got).
